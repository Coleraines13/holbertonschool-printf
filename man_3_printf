Man Page for print f

The function _printf is a variadic function that makes a string according to a
.I format
Then will print it to the standard output kind of like the C standard library function printf. It can bring in a variable number of arguments.
This function has been created to articulate the function of printf.
.sp
.B Is the return value
.sp
On success _printf brings back the number of characters printed. If
.I format
is NULL or if the functions encounters any errors, it returns -1.
.sp
.B Is just the format of the format string
.sp
The format string can have any characters, just like a regular or normal string, in double quotes, which will be printed as is. For instance, _printf(\(dqHello\(dq) will print: Hello.
However, this format string can contain
.I conversion specifiers.
These start with a %, and are followed with a character (.I conversion specifiers). Are special characters like a new line which will then escape, for example _printf(\(dq\\n\(dq) will print a new line.
.sp
.B Conversion specifiers
.sp
These are the characters that specify the type of the variable that will need to be printed. The variables to be printed are excluded from the format string with a comma. Each variable that is passed to _printf will need to have a conversion or changing specifier.
.sp
.B i, d
- Both these specifiers are for
.I int
arguments. They turn the variable to a decimal number, positive or negative.
.sp
.B c
- Prints a
.I single character.
.sp
.B s
- Prints an entire or whole
.I string.
.sp
.B u
- Prints an
.I unsigned int.
.sp
.B x, X
- Will print a number in lowercase and uppercase
.I hexadecimal
base.
.sp
.B o, b
- will print a number in
.I octal
and
.I binary
base.
.sp
.B %
- Will act like a get away for the character %. To print \(dq%\(dq, the format string will have \(dq%%\(dq.
.sp
.B r, R
- Will print a string in reverse and in ROT13 code..
.sp
.B S
- Will print a string, but the non-printable characters will be printed in this format: \\x, followed by the ASCII code value in uppercase hexadecimal.
.sp
.B p
- Will print the address, given by a pointer variable
.sp
.B Will point out characters for changing specifiers
.sp
.B +
- Will print a plus sign before or in front of positive signed integers and a minus sign before or in front of negative signed integers.
 + overrides a space when both or all flags are given.
 .sp
 .B ' '
 - Will print a space before or in front of signed integers.
 .sp
 .B #
 - Is just the modifier for unsigned conversions. For x, its attached and comes before \(dq0x\(dq, and for X, prepends \(dq0X\(dq. For o, if the converted number doesn't already begin with a 0, its attached and comes before a 0.
.sp
.SH Also see
.I printf(3)
.I _putchar.c
.SH NOTES
_printf uses a custom or specific character printing function that is called _putchar, that uses the system call write(). 
_putchar will use a static buffer of 1024 bytes also a static incrementing or accumulating variable. 
So that everytime _putchar is called in _printf, the character is saved and stored in the buffer and the function moves to the following character, 
So until _printf calls _putchar(-1), which \(dqflushes\(dq the buffer and sets the incrementing variable again to 0. 
So_putchar now will only need to call write one single time giving it to the whole buffer and the number of bytes in it, which will be given by the value of the incrementing or accumulating variable.
.sp
.SH BUGS
_printf will not take care of length and precise or accurate modifiers yet. For instance, _printf(\(dq%hx\(dq) will not make the same output as the call to the standard library printf.
